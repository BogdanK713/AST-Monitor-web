-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE public.users
(
    "usersID" serial NOT NULL,
    username character varying(50) NOT NULL,
	password character varying(255) NOT NULL,
    email character varying(100) NOT NULL,
    role character varying(15) NOT NULL,
    PRIMARY KEY ("usersID")
);

CREATE TABLE IF NOT EXISTS public.training_sessions
(
    "sessionsID" serial NOT NULL,
    "usersID" integer NOT NULL,
    date date NOT NULL,
    duration interval NOT NULL,
    type character varying NOT NULL,
    PRIMARY KEY ("sessionsID")
);

CREATE TABLE IF NOT EXISTS public.performance_metrics
(
    "metricsID" serial NOT NULL,
    "sessionsID" integer NOT NULL,
    heart_rate integer,
    speed numeric(5, 2),
    power_output numeric(5, 2),
    gps_data text,
    PRIMARY KEY ("metricsID")
);

CREATE TABLE IF NOT EXISTS public.training_plans
(
    "plansID" serial NOT NULL,
    "usersID" integer NOT NULL,
    start_date date NOT NULL,
    end_date date NOT NULL,
    goal character varying(255),
    PRIMARY KEY ("plansID")
);

CREATE TABLE IF NOT EXISTS public.organizations
(
    "organizationsID" serial NOT NULL,
    name character varying(255) NOT NULL,
    type character varying(100) NOT NULL,
    PRIMARY KEY ("organizationsID")
);

CREATE TABLE IF NOT EXISTS public.memberships
(
    "membershipsID" serial NOT NULL,
    "usersID" integer NOT NULL,
    "organizationsID" integer NOT NULL,
    PRIMARY KEY ("membershipsID")
);

CREATE TABLE IF NOT EXISTS public.equipment
(
    "equipmentID" serial NOT NULL,
    type character varying(100) NOT NULL,
    model character varying(100) NOT NULL,
    compatible_with character varying(255),
    PRIMARY KEY ("equipmentID")
);

CREATE TABLE IF NOT EXISTS public.user_equipment
(
    "user_equipmentID" serial NOT NULL,
    "usersID" integer NOT NULL,
    "equipmentID" integer NOT NULL,
    PRIMARY KEY ("user_equipmentID")
);

CREATE TABLE IF NOT EXISTS public.apis
(
    "apisID" serial NOT NULL,
    provider character varying(255) NOT NULL,
    usage_info text,
    PRIMARY KEY ("apisID")
);

CREATE TABLE IF NOT EXISTS public.api_integrations
(
    "integrationsID" serial NOT NULL,
    "apisID" integer NOT NULL,
    "usersID" integer NOT NULL,
    PRIMARY KEY ("integrationsID")
);

ALTER TABLE IF EXISTS public.training_sessions
    ADD FOREIGN KEY ("usersID")
    REFERENCES public.users ("usersID") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.performance_metrics
    ADD FOREIGN KEY ("sessionsID")
    REFERENCES public.training_sessions ("sessionsID") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.training_plans
    ADD FOREIGN KEY ("usersID")
    REFERENCES public.users ("usersID") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.memberships
    ADD FOREIGN KEY ("usersID")
    REFERENCES public.users ("usersID") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.memberships
    ADD FOREIGN KEY ("organizationsID")
    REFERENCES public.organizations ("organizationsID") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.user_equipment
    ADD FOREIGN KEY ("usersID")
    REFERENCES public.users ("usersID") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.user_equipment
    ADD FOREIGN KEY ("equipmentID")
    REFERENCES public.equipment ("equipmentID") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.api_integrations
    ADD FOREIGN KEY ("apisID")
    REFERENCES public.apis ("apisID") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.api_integrations
    ADD FOREIGN KEY ("usersID")
    REFERENCES public.users ("usersID") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;

END;